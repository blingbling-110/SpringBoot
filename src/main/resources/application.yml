#  Spring Boot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件
#  –file:./config/（文件路径下的config文件夹，本项目中即为 SpringBoot/config/）
#  –file:./（文件路径，本项目中即为 SpringBoot/）
#  –classpath:/config/（类路径下的config文件夹，本项目中即为 SpringBoot/src/main/resources/config/）
#  –classpath:/（类路径，本项目中即为 SpringBoot/src/main/resources/）
#  –以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先级配置内容会覆盖低优先级配置内容。（互补配置）
#  –我们也可以通过配置 spring.config.location 来改变默认配置（命令行参数）

#  Spring Boot 外部配置加载顺序:
#  https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config
#  1.命令行参数
#  2.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件
#  3.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件
#  4.jar包外部的application.properties或application.yml(不带spring.profile)配置文件
#  5.jar包内部的application.properties或application.yml(不带spring.profile)配置文件
#  6.@Configuration注解类上的@PropertySource
#  7.通过SpringApplication.setDefaultProperties指定的默认属性
debug: false # 若开启 Spring Boot debug 可以查看条件评估报告进而知道自动配置了哪些组件
spring:
  profiles:
    active:
      - dev
server:
  port: 8085
  servlet:
    context-path: /begin # 配置项目的访问路径
ymltest:
  str_test1: q \n z \t j${random.int[200,500]}${ymltest.default:default}
  str_test2: "q \n z \t j"
  str_test3: 'q \n z \t j'
  date: 2019/8/19
  device:
    id: Dev001
    name: 设备001
  user_map: {0: 超级管理员, 1: 管理员}
  brw_list:
    - Dev001
    - 2019-8-19 19:38:23
    - 0
---
spring:
  profiles: dev
server:
  port: 8088
ymltest:
  str_test1: (开发环境)
---
spring:
  profiles: prod
server:
  port: 80
ymltest:
  str_test1: (生产环境)